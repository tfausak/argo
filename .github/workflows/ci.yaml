name: CI
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  release:
    types:
      - created
jobs:
  ci:
    strategy:
      matrix:
        include:
          - { platform: ubuntu, ghc: 9.2.1 }
          - { platform: ubuntu, ghc: 9.0.2 }
          - { platform: ubuntu, ghc: 8.10.7 }
          - { platform: macos, ghc: 9.2.1 }
          - { platform: windows, ghc: 9.2.1, extension: .exe }
    runs-on: ${{ matrix.platform }}-latest
    name: GHC ${{ matrix.ghc }} on ${{ matrix.platform }}
    steps:

      - uses: actions/checkout@v2

      - run: mkdir artifact

      - id: artifact
        run: echo '::set-output name=directory::artifact/${{ matrix.platform }}-${{ matrix.ghc }}'

      - run: mkdir ${{ steps.artifact.outputs.directory }}

      - id: setup-haskell
        uses: haskell/actions/setup@v1
        with:
          ghc-version: ${{ matrix.ghc }}

      - run: cabal configure --enable-benchmarks --enable-tests --flags pedantic --jobs

      - run: cabal freeze

      - run: cat cabal.project.freeze | tee ${{ steps.artifact.outputs.directory }}

      - uses: actions/cache@v2
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: ${{ matrix.platform }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}
          restore-keys: ${{ matrix.platform }}-${{ matrix.ghc }}-

      - run: cabal build

      - run: cabal install --install-method copy --installdir ${{ steps.artifact.outputs.directory }} .

      - run: cabal test --test-show-details direct

      - run: cabal bench --benchmark-options '--csv ${{ steps.artifact.outputs.directory }}/benchmark.csv +RTS -T -RTS'

      - run: cabal check

      - run: cabal sdist --output-dir ${{ steps.artifact.outputs.directory }}

      - uses: svenstaro/upx-action@v2
        with:
          file: ${{ steps.artifact.outputs.directory }}/argo${{ matrix.extension }}
          args: --best

      - uses: actions/upload-artifact@v2
        with:
          name: argo-${{ github.sha }}
          path: artifact

  release:
    needs: ci
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: argo-${{ github.sha }}
          path: artifact

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/octet-stream
          asset_name: argo-${{ github.event.release.tag_name }}-ubuntu
          asset_path: artifact/ubuntu-9.2.1/argo
          upload_url: ${{ github.event.release.upload_url }}

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/octet-stream
          asset_name: argo-${{ github.event.release.tag_name }}-macos
          asset_path: artifact/macos-9.2.1/argo
          upload_url: ${{ github.event.release.upload_url }}

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/octet-stream
          asset_name: argo-${{ github.event.release.tag_name }}-windows.exe
          asset_path: artifact/windows-9.2.1/argo.exe
          upload_url: ${{ github.event.release.upload_url }}

      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: application/gzip
          asset_name: argo-${{ github.event.release.tag_name }}.tar.gz
          asset_path: artifact/ubuntu-9.2.1/argo-${{ github.event.release.tag_name }}.tar.gz
          upload_url: ${{ github.event.release.upload_url }}

      - run: cabal upload --publish --username '${{ secrets.HACKAGE_USERNAME }}' --password '${{ secrets.HACKAGE_PASSWORD }}' artifact/ubuntu-9.2.1/argo-${{ github.event.release.tag_name }}.tar.gz
